import os,base64
from src._loggingfile import *

__all__ = ["ENCODEPROCESS"]

#EXAMPLE

class ENCODEPROCESS(object):
    def __new__(cls,fileinit:str):
        rb = object.__new__(cls)
        return rb
    def __init__(self,fileinit:str):
        self.__fl = fileinit
        self.__enc = None
    def __str__(self):
        return "ENCODING - PROCESS"
    def __call__(self):
        return
    def __getstate__(self):
        raise TypeError("D.E.N.I.E.D")
    def __repr__(self):
        return ENCODEPROCESS.__doc__
    def _CONTROL(self):
        try:
            if os.path.exists(f"{self.__fl}") or os.path.isfile(f"{self.__fl}"):
                print("exist")
                return True
            else:
                return False
        except KeyboardInterrupt:
            raise UserWarning("CLOSED BY USER")
        except Exception as err:
            # print(str(err))
            return False
    def _RUN(self):
        cntl = self._CONTROL()
        if cntl:
            fo = open(self.__fl,"rb")
            try:
                self.__enc = base64.b64encode(fo.read())
                fo.close()
                with LOGSAVEFILE("encrypted.txt") as ff:
                    ff._SAVEIN(self.__enc)
            except KeyboardInterrupt:
                fo.close()
                raise UserWarning("CLOSED BY USER")
            except Exception as err:
                print(str(err))
                fo.close()
                pass
            if self.__enc != None:
                return self.__enc
            else:
                pass