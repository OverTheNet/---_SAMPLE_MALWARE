import os,base64
from src._loggingfile import *

__all__ = ["DECODEPROCESS"]

#EXAMPLE

class DECODEPROCESS(object):
    def __cls__(cls,keyinit:str):
        rb = object.__new__(cls)
        return rb
    def __init__(self,keyinit:str):
        self.__kk = keyinit
        self.__dc = None
    def __str__(self):
        return "DECODING - PROCESS"
    def __call__(self):
        return
    def __getstate__(self):
        raise TypeError("D.E.N.I.E.D")
    def __repr__(self):
        return DECODEPROCESS.__doc__
    def _CONTROL(self):
        try:
            if os.path.exists(self.__kk) or os.path.isfile(self.__kk) or\
                os.path.isdir(self.__kk):
                    return True
            else:
                return False
        except KeyboardInterrupt:
            raise UserWarning("CLOSED BY USER")
        except Exception as err:
            # print(str(err))
            return False
    def _RUN(self):
        cntl = self._CONTROL()
        if cntl:
            fo = open(self.__kk,"r")
            try:
                self.__dc = base64.b64decode(fo.read())
                fo.close()
                with LOGSAVEFILE("decoded.txt") as ff:
                    ff._SAVEIN(self.__dc)
            except KeyboardInterrupt:
                fo.close()
                raise UserWarning("CLOSED BY USER")
            except Exception as err:
                fo.close()
                # print(str(err))
                pass
            if self.__dc != None:
                return self.__dc
            else:
                pass           
            