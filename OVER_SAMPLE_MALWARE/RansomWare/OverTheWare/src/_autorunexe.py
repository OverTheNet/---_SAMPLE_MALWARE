import os

__all__ = ["AUTORUNCREATE"]

class AUTORUNCREATE(object):
    def __new__(cls,exein:str):
        rb = object.__new__(cls)
        return rb
    def __init__(self,exein:str):
        self.__ex = exein
        self.__hd = "[Autorun]"
        self.__op = "Open="
        self.__act = "Action="
        self.__shl = "ShellExecute="
        self.__lbl = "Label="
        self.__icn = "Icon="
        self.__pd = os.getcwd()
        self.__or = ""
    def __str__(self):
        return "CREATING AUTORUN FILE - PROCESS"
    def __call__(self):
        return
    def __getstate__(self):
        raise TypeError("D.E.N.I.E.D")
    def __repr__(self):
        return AUTORUNCREATE.__doc__
    def _WRITEIN(self):
        fpp = open("Autorun.inf","w")
        return fpp
    def _RETURNORDER(self,
                     deflb:str="My USB",
                     defac:str="Start Firefox Portable"):
        try:
            self.__or += self.__hd+"\n"
            self.__or += self.__op+self.__pd+"\\"+self.__ex+"\n"
            self.__or += self.__act+defac+"\n"
            self.__or += self.__shl+self.__pd+"\\"+self.__ex+"\n"
            self.__or += self.__lbl+deflb+"\n"
            self.__or += self.__icn+self.__ex
        except KeyboardInterrupt:
            raise UserWarning("CLOSED BY USER")
        except Exception as err:
            # print(str(err))
            pass
    def _GET(self):
        self._RETURNORDER()
        fpp = self._WRITEIN()
        if self.__or != "":
            try:
                fpp.write(self.__or)
                fpp.close()
            except KeyboardInterrupt:
                fpp.close()
                raise UserWarning("CLOSED BY USER")
            except Exception as err:
                fpp.close()
                # print(str(err))
                pass
        else:
            fpp.close()
            pass