from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from src._loggingfile import *

__all__ = ["DECFILE"]

#EXAMPLE

class DECFILEEXP(object):
    def __new__(cls,fltar:str,prvkey:str):
        rb = object.__new__(cls)
        return rb
    def __init__(self,fltar:str,prvkey:str):
        self.__fl = fltar
        self.__pr = prvkey
        self.__dec = None
        self.__enc = None
        self.__prv = None
    def __str__(self):
        return "DECRYPTION - PROCESS"
    def __call__(self):
        return
    def __getstate__(self):
        raise TypeError("D.E.N.I.E.D")
    def __repr__(self):
        return DECFILE.__doc__
    def _RETURN_KEY(self):
        try:
            try:
                with open(self.__fl,"rb") as po:
                    self.__enc = po.read()
            except:
                pass
            try:
                with open(self.__pr,"rb") as dc:
                    self.__prv = dc.read()
            except:
                pass
            if self.__enc != None and self.__prv != None:
                return self.__enc,self.__prv
            else:
                pass
        except KeyboardInterrupt:
            raise UserWarning("CLOSED BY USER")
        except Exception as err:
            # print(str(err))
            pass
    def _LAUNCH(self):
        try:
            ec,dc = self._RETURN_KEY()
            prvim = RSA.import_key(dc)
            prvae = PKCS1_OAEP.new(prvim)
            self.__dec = prvae.decrypt(ec)
            with LOGSAVEFILE("savedfile.txt") as dwb:
                dwb._SAVEIN(self.__dec)
            return
        except KeyboardInterrupt:
            raise UserWarning("CLOSED BY USER")
        except Exception as err:
            # print(str(err))
            pass