from configparser import ConfigParser
from src._loggingfile import *

class CONFIGINIT(object):
    def __init__(self):
        self.__mtr = "../_datausage/batchtemp.ini"
        self.__con = ConfigParser()
        self.__con.read(self.__mtr)
        self.__nme = "OverTheWare.py"
        self.__stp = "@pause"
    def __str__(self):
        "CONFIGURATION FOR BATCH FILE - PROCESS"
    def __call__(self):
        return
    def __getstate__(self):
        raise TypeError("D.E.N.I.E.D")
    def __repr__(self):
        return CONFIGINIT.__doc__
    def _GETSECTION(self):
        return self.__con.sections()
    def _SETKEY(self):
        try:
            self.__con.set("LASERV","nexe",self.__nme)
            self.__con.set("MASERV","exein",self.__nme)
            self.__con.set("MASERV","exeinbatch",self.__nme)
        except KeyboardInterrupt:
            raise UserWarning("CLOSED BY USER")
        except Exception as err:
            # print(str(err))
            pass
    def _GETITEMS(self):
        self._SETKEY()
        sec = self._GETSECTION()
        for xi in sec:
            itm = self.__con.items(xi)
            if isinstance(itm,list) and len(itm) != 0:
                for i in itm:
                    try:
                        if i[0] == "forbatch":
                            return i[1]
                    except KeyboardInterrupt:
                        raise UserWarning("CLOSED BY USER")
                    except Exception as err:
                        print(str(err))
                        pass
    def _MAKE(self):
        cmd = self._GETITEMS()
        with LOGSAVEFILE("../_datausage/OverTheBat.bat") as btt:
            try:
                btt._SAVEIN(cmd.encode())
                btt._SAVEIN("\n".encode())
                btt._SAVEIN(self.__stp.encode())
                print("BATCH - CREATED")
            except Exception as err:
                # print(str(err))
                pass