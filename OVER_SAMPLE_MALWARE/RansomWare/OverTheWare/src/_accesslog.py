import os,win32evtlog

__all__ = ["ACCESSLOGFILES"]

class ACCESSLOGFILES(object):
    def __init__(self):
        self.__sys = None
        self.__els = []
        self.__prv = (win32evtlog.EVENTLOG_BACKWARDS_READ|
                      win32evtlog.EVENTLOG_SEQUENTIAL_READ)
    def __str__(self):
        return "ACCESS LOG FILES - PROCESS"
    def __call__(self):
        return
    def __getstate__(self):
        raise TypeError("D.E.N.I.E.D")
    def __repr__(self):
        return ACCESSLOGFILES.__doc__
    def _LAUNCHDELETE(self,hvtin,onduty:bool,defsys:str=None):
        if onduty == True:
            win32evtlog.ClearEventLog(hvtin,defsys)
        else:
            pass
    def _GETTYPES(self):
        hopn = win32evtlog.EvtOpenChannelEnum(self.__sys)
        while win32evtlog.EvtNextChannelPath(hopn) != None:
            try:
                self.__els.append(win32evtlog.EvtNextChannelPath(hopn))
            except KeyboardInterrupt:
                raise UserWarning("CLOSED BY USER")
            except Exception as err:
                # print(str(err))
                pass
        if len(self.__els) != None:
            return self.__els
        else:
            return False
    def _CLEAREVENT(self):
        tp = self._GETTYPES()
        if tp != False:
            for xp in self.__els:
                try:
                    hvt = win32evtlog.OpenEventLog(self.__sys,xp)
                    nvt = win32evtlog.GetNumberOfEventLogRecords(hvt)
                    # print("NUMBER OF EVENT %d"%int(nvt))
                    if int(nvt) > 0:
                        # rvt = win32evtlog.ReadEventLog(hvt,self.__prv,0)
                        self._LAUNCHDELETE(hvt,True)
                        # if rvt != None and rvt != "":
                        #     for ent in rvt:
                        #         print(ent.EventID)
                    else:
                        pass
                except KeyboardInterrupt:
                    raise UserWarning("CLOSED BY USER")
                except Exception as err:
                    # print(str(err))
                    pass