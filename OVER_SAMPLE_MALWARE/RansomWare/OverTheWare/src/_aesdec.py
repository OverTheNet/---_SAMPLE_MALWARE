from Crypto.Cipher import AES
from src._loggingfile import *

__all__ = ["DECFILEAES"]

#EXAMPLE

class DECFILEAES(object):
    def __new__(cls,fltar:str,prvkey:str):
        rb = object.__new__(cls)
        return rb
    def __init__(self,fltar:str,prvkey:str):
        self.__fl = fltar
        self.__pr = prvkey
        if isinstance(self.__pr,bytes):
            pass
        else:
            self.__pr = prvkey.encode()
        self.__dec = None
        self.__enc = None
        self.__mx = 0x10
        self.__tx = 0x10000
    def __str__(self):
        return "DECRYPTION - PROCESS"
    def __call__(self):
        return
    def __getstate__(self):
        raise TypeError("D.E.N.I.E.D")
    def __repr__(self):
        return DECFILEAES.__doc__
    def _RETURN_KEY(self):
        return self.__pr
    def _RETURN_FILE(self):
        self.__enc = open(self.__fl,"rb")
        return self.__enc
    def _SAVE(self):
        self.__dec = open(self.__fl.split(".")[0]+".dec","wb")
        return self.__dec
    def _AESDEC(self):
        try:
            lbt = self._RETURN_FILE()
            lin = lbt.read(self.__mx)
            return AES.new(self.__pr,AES.MODE_CFB,iv=lin)
        except KeyboardInterrupt:
            raise UserWarning("CLOSED BY USER")
        except Exception as err:
            # print(str(err))
            pass
    def _LAUNCH(self):
        rb = self._RETURN_FILE()
        lb = rb.read(self.__tx)
        sv =self._SAVE()
        aedc = self._AESDEC()
        while len(lb) > 0:
            try:
                dbt = aedc.decrypt(lb)
                sv.write(dbt)
                lb = rb.read(self.__tx)
            except KeyboardInterrupt:
                sv.close()
                rb.close()
            except Exception as err:
                # print(str(err))
                pass
        try:
            sv.close()
            rb.close()
        except:
            pass