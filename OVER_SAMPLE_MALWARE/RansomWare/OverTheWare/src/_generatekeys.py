from Crypto.PublicKey import RSA
from src._loggingfile import *

__all__ = ["GENERATEKEYS"]

#EXAMPLE

class GENERATEKEYS(object):
    def __new__(cls,bt:int):
        rb = object.__new__(cls)
        return rb
    def __init__(self,bt:int):
        self.__mx = bt
        self.__ky = None
        self.__pyky = None
        self.__pbky = None
    def __str__(self):
        return "GENERATING PUBLIC AND PRIVATE KEY - PROCESS"
    def __call__(self):
        return
    def __getstate__(self):
        raise TypeError("D.E.N.I.E.D")
    def __repr__(self):
        return GENERATEKEYS.__doc__
    def _GETGEN(self):
        try:
            self.__ky = RSA.generate(self.__mx)
        except KeyboardInterrupt:
            raise UserWarning("CLOSED BY USER")
        except Exception as err:
            # print(str(err))
            pass
    def _GETKEYS(self):
        self._GETGEN()
        if self.__ky:
            try:
                self.__pyky = self.__ky.export_key()
                self.__pbky = self.__ky.publickey().export_key()
            except KeyboardInterrupt:
                raise UserWarning("CLOSED BY USER")
            except Exception as err:
                print(str(err))
                pass
    def _SAVEKEYS(self):
        self._GETKEYS()
        if self.__pyky != None and self.__pbky != None:
            try:
                with LOGSAVEFILE("private.pem") as pp:
                    pp._SAVEIN(self.__pyky)
                with LOGSAVEFILE("public.pem") as pb:
                    pb._SAVEIN(self.__pbky)
            except KeyboardInterrupt:
                raise UserWarning("CLOSED BY USER")
            except Exception as err:
                print(str(err))
                pass